{"version":3,"sources":["index.js"],"names":["YouTubePlayer","invoke","player","duration","isPaused","window","innerWidth","innerHeight","width","height","onReady","bind","onError","onStateChange","onPlaybackRateChange","onPlaybackQualityChange","onPlaying","onDurationReady","_onStateChange","data","_setDuration","_setCurrentTime","createPlayer","opts","options","playerVars","enablejsapi","autoplay","rel","controls","playsinline","modestbranding","showinfo","on","playVideo","then","pauseVideo","seekTo","s","getDuration","setInterval","getCurrentTime","define"],"mappings":"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","sourcesContent":["import YouTubePlayer from \"youtube-player\";\r\nimport invoke from \"react-native-webview-invoke/browser\";\r\n\r\nvar player;\r\nlet duration = 0;\r\nlet isPaused = false;\r\nconst { innerWidth, innerHeight } = window;\r\nlet width = \"100%\";\r\nlet height = \"100%\";\r\n\r\n// if (innerHeight > (innerWidth * 9) / 16) width = (innerHeight * 16) / 9;\r\n// else height = (innerWidth * 9) / 16;\r\n\r\n//listeners\r\n\r\nconst onReady = invoke.bind(\"onReady\");\r\nconst onError = invoke.bind(\"onError\");\r\nconst onStateChange = invoke.bind(\"onStateChange\");\r\nconst onPlaybackRateChange = invoke.bind(\"onPlaybackRateChange\");\r\nconst onPlaybackQualityChange = invoke.bind(\"onPlaybackQualityChange\");\r\nconst onPlaying = invoke.bind(\"onPlaying\");\r\nconst onDurationReady = invoke.bind(\"onDurationReady\");\r\n\r\nconst _onStateChange = ({ data }) => {\r\n  // in case first time playing ,\r\n  // we need to send Duration\r\n  // and start Interval to sent current Time and\r\n  if (data === 1 && duration === 0) {\r\n    _setDuration();\r\n    _setCurrentTime();\r\n  }\r\n  // we need to stop interval in case player state !== playing and activate it on playing mode\r\n  if (data !== 1) isPaused = true;\r\n  else isPaused = false;\r\n\r\n  onStateChange(data);\r\n};\r\n\r\nconst createPlayer = opts => {\r\n  const options = {\r\n    width,\r\n    height,\r\n    ...opts,\r\n    playerVars: {\r\n      enablejsapi: 1,\r\n      autoplay: 0,\r\n      rel: 0,\r\n      controls: 0,\r\n      playsinline: 1,\r\n      modestbranding: 1,\r\n      showinfo: 0,\r\n      ...opts.playerVars\r\n    }\r\n  };\r\n\r\n  player = YouTubePlayer(\"player\", options);\r\n  player.on(\"ready\", onReady);\r\n  player.on(\"error\", onError);\r\n  player.on(\"stateChange\", _onStateChange);\r\n  player.on(\"playbackRateChange\", onPlaybackRateChange);\r\n  player.on(\"playbackQualityChange\", onPlaybackQualityChange);\r\n  if (opts.playerVars && opts.playerVars.autoplay) playVideo();\r\n};\r\n\r\n//createPlayer({ videoId: \"Z1LmpiIGYNs\" });\r\n\r\n// actions\r\nconst playVideo = () => {\r\n  player.playVideo().then(() => {});\r\n};\r\nconst pauseVideo = () => {\r\n  player.pauseVideo().then(() => {});\r\n};\r\nconst seekTo = s => {\r\n  player.seekTo(s).then(() => {});\r\n};\r\n\r\nconst _setDuration = () =>\r\n  player.getDuration().then(s => {\r\n    duration = s;\r\n    onDurationReady(s);\r\n  });\r\n\r\n// send current time every 1000 ms\r\nconst _setCurrentTime = () => {\r\n  setInterval(() => {\r\n    if (!isPaused) player.getCurrentTime().then(s => onPlaying(s));\r\n  }, 500);\r\n};\r\n\r\n// invoke functions\r\n\r\ninvoke.define(\"createPlayer\", createPlayer);\r\ninvoke.define(\"playVideo\", playVideo);\r\ninvoke.define(\"pauseVideo\", pauseVideo);\r\ninvoke.define(\"seekTo\", seekTo);\r\n"]}