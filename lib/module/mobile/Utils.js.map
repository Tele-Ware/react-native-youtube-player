{"version":3,"sources":["Utils.tsx"],"names":["Animated","interpolate","Extrapolate","Dimensions","Platform","get","width","height","innerHeight","innerWidth","IsAndroid","OS","VideoSize","inline","fullScreen","fullScreenInterpolate","layout","inputRange","topRange","top","leftRange","left","outputRange","extrapolate","CLAMP","sec2time","time","pad","num","size","slice","hours","Math","floor","minutes","seconds"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\r\nconst { interpolate, Extrapolate } = Animated;\r\nimport { Dimensions, Platform } from \"react-native\";\r\n\r\nconst { width, height } = Dimensions.get(\"window\");\r\nconst innerHeight = width < height ? height : width;\r\nconst innerWidth = width < height ? width : height;\r\n\r\nconst IsAndroid = Platform.OS === \"android\";\r\n\r\nexport const VideoSize = {\r\n  inline: {\r\n    width: innerWidth,\r\n    height: (innerWidth * 9) / 16\r\n  },\r\n  fullScreen: {\r\n    height: innerWidth,\r\n    width: innerHeight\r\n  }\r\n};\r\n\r\nexport const fullScreenInterpolate = (\r\n  width: Animated.Value<number>,\r\n  layout: { top: number; left: number }\r\n) => {\r\n  const inputRange = [VideoSize.inline.width, VideoSize.fullScreen.width];\r\n\r\n  const topRange = [IsAndroid ? layout.top : 0, IsAndroid ? 0 : -layout.top];\r\n  const leftRange = [IsAndroid ? layout.left : 0, IsAndroid ? 0 : -layout.left];\r\n\r\n  const top = interpolate(width, {\r\n    inputRange,\r\n    outputRange: topRange,\r\n    extrapolate: Extrapolate.CLAMP\r\n  });\r\n  const left = interpolate(width, {\r\n    inputRange,\r\n    outputRange: leftRange,\r\n    extrapolate: Extrapolate.CLAMP\r\n  });\r\n\r\n  const height = interpolate(width, {\r\n    inputRange,\r\n    outputRange: [VideoSize.inline.height, VideoSize.fullScreen.height + 2],\r\n    extrapolate: Extrapolate.CLAMP\r\n  });\r\n\r\n  return { top, height, left };\r\n};\r\n\r\nexport const sec2time = (time: number) => {\r\n  var pad = function(num: number, size: number) {\r\n      return (\"000\" + num).slice(size * -1);\r\n    },\r\n    hours = Math.floor(time / 60 / 60),\r\n    minutes = Math.floor(time / 60) % 60,\r\n    seconds = Math.floor(time - minutes * 60);\r\n\r\n  return `${hours > 0 ? pad(hours, 2) + \":\" : \"\"} ${pad(minutes, 2)} :${pad(\r\n    seconds,\r\n    2\r\n  )}`;\r\n};\r\n"]}